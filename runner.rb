require "csv"
require "net/https"
require "uri"

# class open and read a CSV file.
# return an Array with each row or the CSV file
class CsvReader
  def initialize(src, headers = false)
    @source = src
    @headers = headers
  end

  def open_file
    csv_text = File.read(@source)
    CSV.parse(csv_text, :headers => @headers)
  end

  def readcsv
    my_result = []
    csv = open_file
    csv.each do |row|
     my_result << row
    end
  end
end
################### END READ CSV ########################


# class that check the status of an URL
class CheckHttpStatus
  def initialize(list_of_urls, live = false, count_more_than_n_redirects = 1) # live: show live information
    @list_of_urls = list_of_urls
    @live = live
    @analysis = Hash.new(0)
    @not_found_count = 0
    @count_more_than_n_redirects = count_more_than_n_redirects
    @more_than_one_redirect = 0
  end

  def actual_status(status)
    puts status
  end

  def scape_urls(my_str)
    URI.parse(URI.encode(my_str))
  end

  def fetch(uri_str, limit = 10, jumps = [], redirection = 0, status = "", codes = [])
    # You should choose a better exception.
    #raise ArgumentError, 'too many HTTP redirects' if limit == 0
    if limit == 0
      return codes, jumps, redirection
    end
    
    # get response for the current url to analyze
    uri_str = scape_urls(uri_str)
    actual_status(status) if @live
    response = Net::HTTP.get_response(URI(uri_str))
    codes << response.code

    case response
    when Net::HTTPSuccess then
      # the response is 200 -> OK. There is no redirection. Final state for the current url
      status = "    \##{response.code} -> no redirect" + "\n   TOTAL REDIRECTIONS: #{redirection}"
      actual_status(status) if @live
      jumps << uri_str
      return codes, jumps, redirection
    when Net::HTTPRedirection then
      location = response['location']
      jumps << location
      status = "    \##{response.code} -> redirected to #{location}"
      # check if the url jumps more than one time.
      if redirection == @count_more_than_n_redirects
        @more_than_one_redirect += 1
      end
      # iterate itself
      fetch(location, limit - 1, jumps, redirection + 1, status, codes)
    else
      status = "    \##{response.code} -> #{response.msg}"
      jumps << uri_str
      # check if the error code is 404
      if response.code == "404"
        @not_found_count += 1
      end
      return codes, jumps, redirection
    end
  end

  def analyze
    @list_of_urls.each_with_index do |url, index|
      puts "Processing #{index + 1} / #{ @list_of_urls.count }"
      @analysis[url[0]] = Hash.new(0)
      @analysis[url[0]]['codes'], @analysis[url[0]]['jumps'], @analysis[url[0]]['count_redirects'] = fetch(url[0], 10, [], 0, "\n   " + url[0], [])
    end

    return @analysis, @not_found_count, @more_than_one_redirect
  end

end


# class for exporting purposes
class Exporter
  def time_diff(start_time, end_time)
    seconds_diff = (start_time - end_time).to_i.abs
  
    hours = seconds_diff / 3600
    seconds_diff -= hours * 3600
  
    minutes = seconds_diff / 60
    seconds_diff -= minutes * 60
  
    seconds = seconds_diff
  
    "#{hours.to_s.rjust(2, '0')}:#{minutes.to_s.rjust(2, '0')}:#{seconds.to_s.rjust(2, '0')}"
    # or, as hagello suggested in the comments:
    # '%02d:%02d:%02d' % [hours, minutes, seconds]
  end

  def export(to_export={}, export_format="CSV", starting_at, not_found_count, count_more_than_n_redirects, more_than_n_redirect)
  ending_at = Time.now
    case export_format
    when "CSV" then
      now_file_name = Time.now.strftime('%Y%m%d%H%M%S')
      CSV.open("url-checker-#{now_file_name}.csv", "wb") do |csv|
        csv << ["---------------------------------"]
        csv << ["HTTP Status Code Checker Report"]
        csv << ["CSV Generated by Qbk HTTP Checker at #{ending_at.to_s}"]
        
        spend_time = time_diff(starting_at, ending_at)
        
        csv << ["It spend #{spend_time.to_s} to complete all the process"]
        csv << ["Total urls proccesed: #{to_export.length}"]
        csv << ["Urls with code 404: #{not_found_count}"]
        csv << ["Urls with more than #{count_more_than_n_redirects} redirect: #{more_than_n_redirect}"]
        csv << ["---------------------------------"]
        csv << ["NOTE:"]
        csv << ["      The TOTAL # of urls is not the sum of 'code 404' and 'more than #{count_more_than_n_redirects} redirects' "]
        csv << ["      Because an url with 'code 404' could be inside of a redirect"]
        csv << ["---------------------------------"]
        csv << []
        csv << ["URL Analyzed", "Count Redirects", "Codes", "Redirect"]
        to_export.each do |key, array|
          csv << [key,array['count_redirects']]
          for n in 0..array['count_redirects']
            csv << ",,#{array['codes'].to_a[n]},#{array['jumps'].to_a[n]}".parse_csv(quote_char: "\x00")
          end
          #puts array['jumps']
          #puts array['count_redirects']
        end
        # ...
      end
    else
      return false
    end
  end
end



# Running Script
starting_at = Time.now
print "\e[2J\e[f"
puts "\n\n... STARTING SCRIPT ... #{starting_at.to_s}\n"

# READ THE CSV FILE
my_csv = CsvReader.new('urlstest.csv') # you can use the URL.csv for loading one url - for faster testing purpose
puts "- CSV file already readed. This is the content:"
csv_array = my_csv.readcsv
puts csv_array
# -------------------------
puts "\n\n"
puts "- Starting analizing process, please wait...\n"

# ANALYZE THE URLS
count_more_than_n_redirects = 1
csv_array = csv_array.uniq
my_checker = CheckHttpStatus.new(csv_array, true, count_more_than_n_redirects) # second parameter let us visualize a live log.
analyzer_result, not_found_count, more_than_n_redirect = my_checker.analyze
puts "\n\n"
puts "- The analysis is done. This is the result:\n"
puts analyzer_result
# --------------------------

# EXPORT THE RESULT
puts "\n\n"
puts "- Finally the script will export the result to a new File:"
export_format = "CSV"
exporter = Exporter.new
exporter.export(analyzer_result, export_format, starting_at, not_found_count, count_more_than_n_redirects, more_than_n_redirect)
if exporter
  puts " DONE"
end
# --------------------------

puts "\n ... ENDING SCRIPT ... #{Time.now.utc.to_s}"
